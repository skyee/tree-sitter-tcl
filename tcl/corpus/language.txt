# Code snippets from https://www.tcl.tk/about/language.html
===
Basic syntax
===

expr 20 + 10

expr 20+10

---

(source_file
 (command
  name: (word)
  arguments: (word_list
              (word)
              (word)
              (word)))
 (command
  name: (word)
  arguments: (word_list
              (word))))

===
Variables
===

set x 32

set x

expr $x*3

set cmd expr
set x 11
$cmd $x*$x

---

(source_file
 (command
  name: (word)
  arguments: (word_list
              (word)
              (word)))

 (command
  name: (word)
  arguments: (word_list (word)))

 (command
  name: (word)
  arguments: (word_list
              (concatenation
               (variable_substitution)
               (word))))

 (command
  name: (word)
  arguments: (word_list
              (word)
              (word)))
 (command
  name: (word)
  arguments: (word_list
              (word)
              (word)))
 (command
  name: (variable_substitution)
  arguments: (word_list
              (concatenation
               (variable_substitution)
               (word)
               (variable_substitution)))))

===
Command substitution
===

set a 44
set b [expr $a*4]

---

(source_file
 (command
  name: (word)
  arguments: (word_list
              (word)
              (word)))
 (command
  name: (word)
  arguments: (word_list
              (word)
              (command_substitution
               (command
                name: (word)
                arguments: (word_list
                            (concatenation
                             (variable_substitution)
                             (word))))))))

===
Quotes and braces
===

set x 24
set y 18
set z "$x + $y is [expr $x + $y]"

set z {$x + $y is [expr $x + $y]}

---


(source_file
 (command
  name: (word)
  arguments: (word_list
              (word)
              (word)))
 (command
  name: (word)
  arguments: (word_list
              (word)
              (word)))
 (command
  name: (word)
  arguments: (word_list
              (word)
              (quoted_word
               (variable_substitution)
               (variable_substitution)
               (command_substitution
                (command
                 name: (word)
                 arguments: (word_list
                             (variable_substitution)
                             (word)
                             (variable_substitution)))))))

 (command
  name: (word)
  arguments: (word_list
              (word)
              (braced_word
               (variable_substitution)
               (word)
               (variable_substitution)
               (word)
               (command_substitution
                (command
                 name: (word)
                 arguments: (word_list
                             (variable_substitution)
                             (word)
                             (variable_substitution))))))))

===
Control structures
===

proc power {base p} {
    set result 1
    while {$p > 0} {
        set result [expr $result * $base]
        set p [expr $p - 1]
    }
    return $result
}

power 2 6
power 1.15 5

---

(source_file
 (command
  name: (word)
  arguments: (word_list
              (word)
              (braced_word
               (word)
               (word))
              (braced_word
               (word)
               (word)
               (word)
               (word)
               (braced_word
                (variable_substitution)
                (word)
                (word))
               (braced_word
                (word)
                (word)
                (command_substitution
                 (command
                  name: (word)
                  arguments: (word_list
                              (variable_substitution)
                              (word)
                              (variable_substitution))))
                (word)
                (word)
                (command_substitution
                 (command
                  name: (word)
                  arguments: (word_list
                              (variable_substitution)
                              (word)
                              (word)))))
               (word)
               (variable_substitution))))

 (command
  name: (word)
  arguments: (word_list
              (word)
              (word)))
 (command
  name: (word)
  arguments: (word_list
              (word)
              (word))))
